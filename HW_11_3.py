'''
3.	Создать собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере.
Запрашивать у пользователя данные и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
При этом скрипт завершается, сформированный список с числами выводится на экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
'''
# Создаем класс-исключение

class InputStringError(ValueError):
    def __init__(self, list):
        self.list = list

user_list = []
number = None

# Ведем работу в цикле до тех пор, пока пользователь не введет stop
while True:
    try:
        number = input('Введите число для добавления в список (для выхода введите stop): ')
        if number == 'stop':
            break
        elif not number.isdigit():
            raise InputStringError('InputStringError')      # Исключение при вводе строки
        number = int(number)        # Перевод в формат int, т.к. все что вводится через input по умолчанию str
        user_list.append(number)    # Добавляем число в список
    except InputStringError:
        print('Вы ввели не число. Список должен состоять только из чисел')      # Пояснение для пользователя по ошибке

print(f'Введенный пользователем список имеет вид: {user_list}')



