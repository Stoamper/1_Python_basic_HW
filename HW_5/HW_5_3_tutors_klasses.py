'''
tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
('Иван', '9А')
('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors.
Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде:
(<tutor>, None), например:
('Станислав', None)
Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
Подумать, в каких ситуациях генератор даст эффект.
'''
from itertools import zip_longest

tutors = [
    'Иван', 'Анастасия', 'Петр', 'Сергей',
    'Дмитрий', 'Борис', 'Елена'
]
'''klasses = [
    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
]
'''
klasses = [
    '9А', '7В', '9Б', '9В'
]

def unite_info(tutors, klasses):      # функция с генератором и функцией zip_longest для объединения списков в кортежи
    for name, klass in zip_longest(tutors, klasses, fillvalue=None):
        yield name, klass

result = unite_info(tutors, klasses)        # работа функции
print(list(result))     # вывод списка с кортежами
print(list(result))     # доказательство того, что у нас реализован генератор (выдаст пустой список)
